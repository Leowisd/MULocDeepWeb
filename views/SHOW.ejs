<% include partials/header %>

<!-- Print/save image -->
<script type="text/javascript" src="/lib/jQuery.print.js"></script>
<script type="text/javascript" src="/js/imagePrint.js"></script>

<div class="wrapper">

    <nav class="navbar navbar-expand-md navbar-dark bg-primary">
        <div class="container col-12 col-lg-8">
            <a class="navbar-brand" href="/">MULocDeep</a>
            <button class="navbar-toggler ml-3" type="button" data-toggle="collapse"
                data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/upload"><i class="fas fa-upload"></i> Upload </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/jobs"><i class="fas fa-search"></i> Search </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/jobs/all"><i class="fas fa-list"></i> Status </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/jobs/example"><i class="fas fa-envelope-open-text"></i> Example </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="jumbotron jumbotron-fluid text-center">
        <div class="container">
            <h1 class="display-4"><span class="border-bottom border-dark p-1">MULocDeep</span></h1>
            <p class="lead d-none d-sm-block">A protein locator based on deep learning predicting</p>
        </div>
    </div>

    <div class="container col-12 col-lg-8 ">
        <div class="btn-toolbar d-flex justify-content-start" role="toolbar" aria-label="Toolbar with button group">
            <div class="btn-group mr-2" role="group" aria-label="First group">
                <% var address = "/jobs/download/:" + file%>
                <a class="btn btn-secondary" href="<%= address%>">
                    Download Result
                </a>
            </div>

            <div class="btn-group mt-4 mt-sm-0" role="group" aria-label="Second group">
                <select class="selectpicker show-tick" multiple data-actions-box="true" data-size="5"
                    data-style="btn-primary" data-width="300px" data-live-search="true"
                    title="Choose one of the following...">
                    <% for (var i = 0; i < names.length; i++) {%>
                    <option value="<%= i%>"> <%= names[i]%></option>
                    <% } %>
                </select>
            </div>
        </div>
    </div>

    <div id="mainContainer" class="container border rounded shadow-lg mt-4 pt-3 mx-auto col-12 col-lg-8 "></div>

    <div id="box" class="box">
        <div class="box-in"></div>
    </div>

    <div id="mySidenav" class="sidenav">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <div id="barList" class="list-group"></div>
    </div>
    <div id="sidebarBtn" class="sidebarBtn" onclick="toggleNav()">
        <div class="barBtn-in"></div>
    </div>

    <script>
        window.onload = function () {
        };

        $(function () {
            $('[data-toggle="popover"]').popover()
        })

        // ++++++++++++++++++++++++++++++++++
        // ++++++++++++++++++++++++++++++++++
        // Analysis deepdom results' data
        // ++++++++++++++++++++++++++++++++++
        // ++++++++++++++++++++++++++++++++++

        var tmpScore = "<%= scores %>";
        score = tmpScore.split(',');
        for (var i = 0; i < score.length; i++) {
            score[i] = score[i].trim().split(' ');
            for (var j = 0; j < score[i].length; j++) {
                score[i][j] = parseFloat(score[i][j]);
            }
        }
        // console.log(score);

        var tmpNames = "<%= names %>";
        // console.log(tmpNames);
        var names = tmpNames.split(',');
        for (var i = 0; i < names.length; i++) {
            names[i] = '>' + names[i].substring(4);
        }
        // console.log(names);

        var tmpSeq = "<%= seq %>";
        var seq = tmpSeq.split(',');
        // console.log(seq);

        var jobId = "<%= jobId %>";
        // console.log(jobId);

        // +++++++++++++++++++++++++++++++++++++
        // +++++++++++++++++++++++++++++++++++++
        // Create main results units
        // +++++++++++++++++++++++++++++++++++++
        // +++++++++++++++++++++++++++++++++++++

        var mainContainer = document.querySelector('#mainContainer');
        var sideNav = document.querySelector('.sidenav');
        var navCopy = sideNav.innerHTML;

        var threshold = 0.42;
        window.myline = [];

        $(".selectpicker").change(function () {
            var idList = $(".selectpicker").val();
            // console.log(idList);

            mainContainer.innerHTML = "";

            sideNav.innerHTML = navCopy;
            $('[data-toggle="popover"]').popover();

            for (var i = 0; i < idList.length; i++) {

                var id = idList[i];

                var container = document.createElement("container");
                mainContainer.appendChild(container);

                // ===========================
                // create a head for each query
                // click to show sequence
                // ===========================
                var queryHead = document.createElement("div");
                container.appendChild(queryHead);
                queryHead.classList.add("alert");
                queryHead.classList.add("text-center");
                queryHead.classList.add("alert-primary");
                queryHead.textContent = names[id] + " (click to show sequence)";
                queryHead.setAttribute("id", "query_header_" + id);
                queryHead.setAttribute("data-toggle", "popover");
                queryHead.setAttribute("data-placement", "top");
                var seqData = "";
                for (var k = 0; k < score[id].length; k++)
                    if (seq[id][k] !== '-')
                        seqData += seq[id][k];
                queryHead.setAttribute("data-content", seqData);
                queryHead.onclick = function () {
                    var cur = parseInt(this.id.substring(13));
                    var tmp = document.getElementById("query_header_" + cur);
                    if (tmp.textContent == names[cur] + " (click to show sequence)") {
                        tmp.classList.remove("alert-primary");
                        tmp.classList.add("alert-warning");
                        tmp.textContent = names[cur] + " (click to unshow sequence)";
                    }
                    else {
                        tmp.classList.remove("alert-warning");
                        tmp.classList.add("alert-primary");
                        tmp.textContent = names[cur] + " (click to show sequence)";
                    }
                }


                // ==============================
                // Create SCOP Collapse Components
                // ==============================
                var scopCard = document.createElement("div");
                container.appendChild(scopCard);
                scopCard.classList.add("card");
                scopCard.classList.add("mt-2");

                var scopHeader = document.createElement("div");
                scopCard.appendChild(scopHeader);
                scopHeader.classList.add("card-header");
                scopHeader.setAttribute("id", "scop_heading_" + id);

                var scopHeaderH2 = document.createElement("h2");
                scopHeader.appendChild(scopHeaderH2);
                scopHeaderH2.classList.add("mb-0");

                var scopbutton = document.createElement("button");
                scopHeaderH2.appendChild(scopbutton);
                scopbutton.classList.add("btn");
                scopbutton.classList.add("btn-link");
                scopbutton.setAttribute("data-toggle", "collapse");
                scopbutton.setAttribute("data-target", "#scop_" + id);
                scopbutton.textContent = "SCOP";

                var scopContent = document.createElement("div");
                scopCard.appendChild(scopContent);
                scopContent.classList.add("collapse");
                scopContent.setAttribute("id", "scop_" + id);

                var scopContentBody = document.createElement("div");
                scopContent.appendChild(scopContentBody);
                scopContentBody.classList.add("card-body");
                scopContentBody.setAttribute("id", "scop_content_" + id);

                var scopURL = "/process/scop/:" + jobId;
                var scopData = { queryNo: id };
                $.post(scopURL, scopData, function (data, status) {
                    // console.log(data);
                    var cur = data.numberId;
                    var card = document.getElementById("scop_content_" + cur);
                    if (data.superfamily == undefined || data.superfamily[0] == '-') {
                        card.classList.add("text-center");
                        card.textContent = "No Result";
                    }
                    else {
                        // -------------------------------------
                        // Generate colors for different familys
                        // -------------------------------------
                        var r = [];
                        var g = [];
                        var b = [];
                        for (var k = 0; k < data.superfamily.length; k++) {
                            r.push(Math.floor(Math.random() * 255));
                            g.push(Math.floor(Math.random() * 255));
                            b.push(Math.floor(Math.random() * 255));
                        }

                        // -----------------------
                        // Create a svg line graph
                        // -----------------------
                        var svglength = mainContainer.clientWidth * 0.95;

                        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                        card.appendChild(svg);
                        svg.setAttribute("width", svglength);
                        svg.setAttribute("height", "50");

                        var line = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        svg.appendChild(line);
                        line.setAttribute("x", 0);
                        line.setAttribute("y", 15);
                        line.setAttribute("width", svglength);
                        line.setAttribute("height", 2);
                        line.setAttribute("style", "fill: rgb(187, 187, 187);");

                        for (var k = 0; k < data.superfamily.length; k++) {
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                                svg.appendChild(rect);
                                rect.setAttribute("y", 5);
                                rect.setAttribute("height", 20);
                                rect.setAttribute("rx", 2);
                                rect.setAttribute("ry", 2);

                                //  cur: No. seq
                                //  k: No. family
                                //  data.seg[k].length / 2: the number of seg rects in current family
                                //  x: No. seg rect in current family
                                rect.setAttribute("id", "rect_scop_" + cur + "_" + k + "_" + data.seg[k].length / 2 + "_" + x);
                                rect.onmouseover = function () {
                                    var tmpid = this.id.split("_");
                                    var curid = parseInt(tmpid[2]);
                                    var curk = parseInt(tmpid[3]);
                                    var curtotal = parseInt(tmpid[4])
                                    for (var l = 0; l < curtotal; l++) {
                                        document.getElementById("rect_scop_" + curid + "_" + curk + "_" + curtotal + "_" + l).classList.add("rect-hover");
                                    }
                                    document.getElementById("table_scop_" + curid + "_" + curk + "_" + curtotal).classList.add("table-hover");
                                }
                                rect.onmouseleave = function () {
                                    var tmpid = this.id.split("_");
                                    var curid = parseInt(tmpid[2]);
                                    var curk = parseInt(tmpid[3]);
                                    var curtotal = parseInt(tmpid[4])
                                    for (var l = 0; l < curtotal; l++) {
                                        document.getElementById("rect_scop_" + curid + "_" + curk + "_" + curtotal + "_" + l).classList.remove("rect-hover");
                                    }
                                    document.getElementById("table_scop_" + curid + "_" + curk + "_" + curtotal).classList.remove("table-hover");
                                }

                                var start = data.seg[k][2 * x];
                                var end = data.seg[k][2 * x + 1];
                                var l = score[cur].length;

                                rect.setAttribute("x", start / l * svglength);
                                rect.setAttribute("width", (end - start) / l * svglength);

                                rect.setAttribute("style", "fill: rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");opacity: 0.8;");
                            }
                        }

                        // -----------------
                        // Create the table
                        // -----------------
                        var table = document.createElement("table");
                        table.classList.add("table");
                        card.appendChild(table);

                        var thead = document.createElement("thead");
                        var theadtr = document.createElement("tr");
                        var th1 = document.createElement("th");
                        th1.setAttribute("scope", "col");
                        th1.textContent = '#';
                        theadtr.appendChild(th1);
                        var th2 = document.createElement("th");
                        th2.setAttribute("scope", "col");
                        th2.textContent = 'Superfamily';
                        theadtr.appendChild(th2);
                        var th3 = document.createElement("th");
                        th3.setAttribute("scope", "col");
                        th3.textContent = 'E-value';
                        theadtr.appendChild(th3);
                        var th4 = document.createElement("th");
                        th4.setAttribute("scope", "col");
                        th4.textContent = 'Family';
                        theadtr.appendChild(th4);
                        var th5 = document.createElement("th");
                        th5.setAttribute("scope", "col");
                        th5.textContent = 'E-value';
                        theadtr.appendChild(th5);
                        var th6 = document.createElement("th");
                        th6.setAttribute("scope", "col");
                        th6.textContent = 'Segments';
                        theadtr.appendChild(th6);
                        var th7 = document.createElement("th");
                        th7.setAttribute("scop", "col");
                        th7.textContent = 'Close Structure'
                        theadtr.appendChild(th7);
                        thead.appendChild(theadtr);
                        table.appendChild(thead);

                        var tbody = document.createElement("tbody");
                        table.appendChild(tbody);
                        for (var k = 0; k < data.superfamily.length; k++) {
                            var tbodytr = document.createElement("tr");
                            tbody.appendChild(tbodytr);
                            // cur: No. seq
                            // k: No. family
                            // data.seg[k].length / 2: the numbe of seg rects in current family
                            tbodytr.setAttribute("id", "table_scop_" + cur + "_" + k + "_" + data.seg[k].length / 2);
                            tbodytr.onmouseover = function () {
                                var tmpid = this.id.split("_");
                                var curid = parseInt(tmpid[2]);
                                var curk = parseInt(tmpid[3]);
                                var curtotal = parseInt(tmpid[4])
                                this.classList.add("table-hover");
                                for (var x = 0; x < curtotal; x++) {
                                    document.getElementById("rect_scop_" + curid + "_" + curk + "_" + curtotal + "_" + x).classList.add("rect-hover");
                                }
                            }
                            tbodytr.onpointerleave = function () {
                                var tmpid = this.id.split("_");
                                var curid = parseInt(tmpid[2]);
                                var curk = parseInt(tmpid[3]);
                                var curtotal = parseInt(tmpid[4])
                                this.classList.remove("table-hover");
                                for (var x = 0; x < curtotal; x++) {
                                    document.getElementById("rect_scop_" + curid + "_" + curk + "_" + curtotal + "_" + x).classList.remove("rect-hover");
                                }
                            }


                            var tbodyth = document.createElement("th");
                            tbodytr.appendChild(tbodyth);
                            tbodyth.setAttribute("scope", "row");

                            var colorbox = document.createElement("span");
                            tbodyth.appendChild(colorbox);
                            colorbox.classList.add("color-box");
                            colorbox.setAttribute("style", "background-color: " + "rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");");

                            var td1 = document.createElement("td");
                            tbodytr.appendChild(td1);
                            var sp_a = document.createElement("a");
                            td1.appendChild(sp_a);
                            sp_a.setAttribute("href", "http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=" + data.scopspfamID[k]);
                            sp_a.setAttribute("target", "scop_superfamily_" + cur + '_' + k);
                            sp_a.textContent = data.spfamName[k];

                            var td2 = document.createElement("td");
                            tbodytr.appendChild(td2);
                            td2.textContent = data.supeval[k];

                            var td3 = document.createElement("td");
                            tbodytr.appendChild(td3);
                            // td3.textContent = data.famName[k];
                            var fam_a = document.createElement("a");
                            td3.appendChild(fam_a);
                            fam_a.setAttribute("href", "http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=" + data.family[k]);
                            fam_a.setAttribute("target", "scop_family_" + cur + '_' + k);
                            fam_a.textContent = data.famName[k];

                            var td4 = document.createElement("td");
                            tbodytr.appendChild(td4);
                            td4.textContent = data.fameval[k];
                            var td5 = document.createElement("td");
                            tbodytr.appendChild(td5);
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                td5.textContent += data.seg[k][2 * x] + '~' + data.seg[k][2 * x + 1];
                                if (x != data.seg[k].length / 2 - 1) td5.textContent += " | ";
                            }

                            var td6 = document.createElement("td");
                            tbodytr.appendChild(td6);
                            // td6.textContent = data.closeName[k];
                            var close_a = document.createElement("a");
                            td6.appendChild(close_a);
                            close_a.setAttribute("href", "http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=" + data.closeID[k]);
                            close_a.setAttribute("target", "scop_close_structure_" + cur + '_' + k);
                            close_a.textContent = data.closeName[k];
                        }
                    }

                })

                // ===============================
                // Create CATH Collapse Components
                // ===============================

                var cathCard = document.createElement("div");
                container.appendChild(cathCard);
                cathCard.classList.add("card");

                var cathHeader = document.createElement("div");
                cathCard.appendChild(cathHeader);
                cathHeader.classList.add("card-header");
                cathHeader.setAttribute("id", "cath_heading_" + id);

                var cathHeaderH2 = document.createElement("h2");
                cathHeader.appendChild(cathHeaderH2);
                cathHeaderH2.classList.add("mb-0");

                var cathbutton = document.createElement("button");
                cathHeaderH2.appendChild(cathbutton);
                cathbutton.classList.add("btn");
                cathbutton.classList.add("btn-link");
                cathbutton.setAttribute("data-toggle", "collapse");
                cathbutton.setAttribute("data-target", "#cath_" + id);
                cathbutton.textContent = "CATH";

                var cathContent = document.createElement("div");
                cathCard.appendChild(cathContent);
                cathContent.classList.add("collapse");
                cathContent.setAttribute("id", "cath_" + id);

                var cathContentBody = document.createElement("div");
                cathContent.appendChild(cathContentBody);
                cathContentBody.classList.add("card-body");
                cathContentBody.setAttribute("id", "cath_content_" + id);

                var cathURL = "/process/cath/:" + jobId;
                var cathData = {
                    queryName: names[id],
                    queryNo: id
                };
                $.post(cathURL, cathData, function (data, status) {
                    // console.log(data);
                    var cur = data.numberId;
                    var card = document.getElementById("cath_content_" + cur);
                    if (data == undefined || data.id.length == 0) {
                        card.classList.add("text-center");
                        card.textContent = "No Result";
                    }
                    else {
                        // -------------------------------------
                        // Generate colors for different familys
                        // -------------------------------------
                        var r = [];
                        var g = [];
                        var b = [];
                        for (var k = 0; k < data.id.length; k++) {
                            r.push(Math.floor(Math.random() * 255));
                            g.push(Math.floor(Math.random() * 255));
                            b.push(Math.floor(Math.random() * 255));
                        }

                        // -----------------------
                        // Create a svg line graph
                        // -----------------------
                        var svglength = mainContainer.clientWidth * 0.95;

                        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                        card.appendChild(svg);
                        svg.setAttribute("width", svglength);
                        svg.setAttribute("height", "50");

                        var line = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        svg.appendChild(line);
                        line.setAttribute("x", 0);
                        line.setAttribute("y", 15);
                        line.setAttribute("width", svglength);
                        line.setAttribute("height", 2);
                        line.setAttribute("style", "fill: rgb(187, 187, 187);");

                        for (var k = 0; k < data.id.length; k++) {
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                                svg.appendChild(rect);
                                rect.setAttribute("y", 5);
                                rect.setAttribute("height", 20);
                                rect.setAttribute("rx", 2);
                                rect.setAttribute("ry", 2);

                                //  cur: No. seq
                                //  k: No. family
                                //  data.seg[k].length / 2: the number of seg rects in current family
                                //  x: No. seg rect in current family
                                rect.setAttribute("id", "rect_cath_" + cur + "_" + k + "_" + data.seg[k].length / 2 + "_" + x);
                                rect.onmouseover = function () {
                                    var tmpid = this.id.split("_");
                                    var curid = parseInt(tmpid[2]);
                                    var curk = parseInt(tmpid[3]);
                                    var curtotal = parseInt(tmpid[4])
                                    for (var l = 0; l < curtotal; l++) {
                                        document.getElementById("rect_cath_" + curid + "_" + curk + "_" + curtotal + "_" + l).classList.add("rect-hover");
                                    }
                                    document.getElementById("table_cath_" + curid + "_" + curk + "_" + curtotal).classList.add("table-hover");
                                }
                                rect.onmouseleave = function () {
                                    var tmpid = this.id.split("_");
                                    var curid = parseInt(tmpid[2]);
                                    var curk = parseInt(tmpid[3]);
                                    var curtotal = parseInt(tmpid[4])
                                    for (var l = 0; l < curtotal; l++) {
                                        document.getElementById("rect_cath_" + curid + "_" + curk + "_" + curtotal + "_" + l).classList.remove("rect-hover");
                                    }
                                    document.getElementById("table_cath_" + curid + "_" + curk + "_" + curtotal).classList.remove("table-hover");
                                }

                                var start = data.seg[k][2 * x];
                                var end = data.seg[k][2 * x + 1];
                                var l = score[cur].length;

                                rect.setAttribute("x", start / l * svglength);
                                rect.setAttribute("width", (end - start) / l * svglength);

                                rect.setAttribute("style", "fill: rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");opacity: 0.8;");
                            }
                        }

                        // -----------------------
                        // Create the result table
                        // -----------------------
                        var table = document.createElement("table");
                        table.classList.add("table");
                        card.appendChild(table);

                        var thead = document.createElement("thead");
                        var theadtr = document.createElement("tr");
                        var th1 = document.createElement("th");
                        th1.setAttribute("scope", "col");
                        th1.textContent = '#';
                        theadtr.appendChild(th1);
                        var th2 = document.createElement("th");
                        th2.setAttribute("scope", "col");
                        th2.textContent = 'Fam. ID';
                        theadtr.appendChild(th2);
                        var th3 = document.createElement("th");
                        th3.setAttribute("scope", "col");
                        th3.textContent = 'Fam. Accession';
                        theadtr.appendChild(th3);
                        var th4 = document.createElement("th");
                        th4.setAttribute("scope", "col");
                        th4.textContent = 'Description';
                        theadtr.appendChild(th4);
                        var th5 = document.createElement("th");
                        th5.setAttribute("scope", "col");
                        th5.textContent = 'Region';
                        theadtr.appendChild(th5);
                        var th8 = document.createElement("th");
                        th8.setAttribute("scope", "col");
                        th8.textContent = 'Dom. Ind. E-values';
                        theadtr.appendChild(th8);
                        var th9 = document.createElement("th");
                        th9.setAttribute("scope", "col");
                        th9.textContent = 'Dom. Cond. E-values';
                        theadtr.appendChild(th9);

                        thead.appendChild(theadtr);
                        table.appendChild(thead);

                        var tbody = document.createElement("tbody");
                        table.appendChild(tbody);
                        for (var k = 0; k < data.id.length; k++) {
                            var tbodytr = document.createElement("tr");
                            tbody.appendChild(tbodytr);
                            // cur: No. seq
                            // k: No. family
                            // data.seg[k].length / 2: the numbe of seg rects in current family
                            tbodytr.setAttribute("id", "table_cath_" + cur + "_" + k + "_" + data.seg[k].length / 2);
                            tbodytr.onmouseover = function () {
                                var tmpid = this.id.split("_");
                                var curid = parseInt(tmpid[2]);
                                var curk = parseInt(tmpid[3]);
                                var curtotal = parseInt(tmpid[4])
                                this.classList.add("table-hover");
                                for (var x = 0; x < curtotal; x++) {
                                    document.getElementById("rect_cath_" + curid + "_" + curk + "_" + curtotal + "_" + x).classList.add("rect-hover");
                                }
                            }
                            tbodytr.onpointerleave = function () {
                                var tmpid = this.id.split("_");
                                var curid = parseInt(tmpid[2]);
                                var curk = parseInt(tmpid[3]);
                                var curtotal = parseInt(tmpid[4])
                                this.classList.remove("table-hover");
                                for (var x = 0; x < curtotal; x++) {
                                    document.getElementById("rect_cath_" + curid + "_" + curk + "_" + curtotal + "_" + x).classList.remove("rect-hover");
                                }
                            }

                            var tbodyth = document.createElement("th");
                            tbodytr.appendChild(tbodyth);
                            tbodyth.setAttribute("scope", "row");

                            var colorbox = document.createElement("span");
                            tbodyth.appendChild(colorbox);
                            colorbox.classList.add("color-box");
                            colorbox.setAttribute("style", "background-color: " + "rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");");

                            var td1 = document.createElement("td");
                            tbodytr.appendChild(td1);
                            var fam_a = document.createElement("a");
                            td1.appendChild(fam_a);
                            fam_a.setAttribute("href", "http://www.cathdb.info/version/latest/domain/" + data.id[k]);
                            fam_a.setAttribute("target", "CATH_family_" + cur + '_' + k);
                            fam_a.textContent = data.id[k];

                            var td2 = document.createElement("td");
                            tbodytr.appendChild(td2);
                            // td2.textContent = data.accession[k];
                            var ass_a = document.createElement("a");
                            td2.appendChild(ass_a);
                            ass_a.setAttribute("href", "http://www.cathdb.info/version/v4_2_0/superfamily/" + data.accession[k]);
                            ass_a.setAttribute("target", "CATH_superfamily_" + cur + '_' + k);
                            ass_a.textContent = data.accession[k];


                            var td3 = document.createElement("td");
                            tbodytr.appendChild(td3);
                            td3.textContent = data.desciption[k];
                            var td4 = document.createElement("td");
                            tbodytr.appendChild(td4);
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                td4.textContent += data.seg[k][2 * x] + '~' + data.seg[k][2 * x + 1];
                                if (x != data.seg[k].length / 2 - 1) td4.textContent += " | ";
                            }
                            var td7 = document.createElement("td");
                            tbodytr.appendChild(td7);
                            td7.textContent = data.indeval[k];
                            var td8 = document.createElement("td");
                            tbodytr.appendChild(td8);
                            td8.textContent = data.condval[k];
                        }
                    }
                })

                // ===================================
                // Create DEEPDOM Collapse Components
                // ===================================
                var deepdomCard = document.createElement("div");
                container.appendChild(deepdomCard);
                deepdomCard.classList.add("card");
                deepdomCard.classList.add("mb-3");

                var deepdomHeader = document.createElement("div");
                deepdomCard.appendChild(deepdomHeader);
                deepdomHeader.classList.add("card-header");
                deepdomHeader.setAttribute("id", "deepdom_heading_" + id);

                var deepdomHeaderH2 = document.createElement("h2");
                deepdomHeader.appendChild(deepdomHeaderH2);
                deepdomHeaderH2.classList.add("mb-0");

                var deepdombutton = document.createElement("button");
                deepdomHeaderH2.appendChild(deepdombutton);
                deepdombutton.classList.add("btn");
                deepdombutton.classList.add("btn-link");
                deepdombutton.setAttribute("data-toggle", "collapse");
                deepdombutton.setAttribute("data-target", "#deepdom_" + id);
                deepdombutton.textContent = "DEEPDOM";

                var deepdomContent = document.createElement("div");
                deepdomCard.appendChild(deepdomContent);
                deepdomContent.classList.add("collapse");
                deepdomContent.setAttribute("id", "deepdom_" + id);

                var deepdomContentBody = document.createElement("div");
                deepdomContent.appendChild(deepdomContentBody);
                deepdomContentBody.classList.add("card-body");
                deepdomContentBody.setAttribute("id", "deepdom_content_" + id);

                // ----------------------------------------------------
                //Add reset-zoom, pan-switch, drag-switch, print button
                // ----------------------------------------------------
                var chartBtnSet = document.createElement('div');
                deepdomContentBody.appendChild(chartBtnSet);
                chartBtnSet.classList.add("btn-group");
                chartBtnSet.classList.add("btn-group-sm");
                chartBtnSet.classList.add("float-right");
                chartBtnSet.classList.add("mb-2");

                var btnReset = document.createElement('button');
                chartBtnSet.appendChild(btnReset);
                btnReset.classList.add("btn");
                btnReset.classList.add("btn-primary");
                btnReset.setAttribute("type", "button");
                btnReset.setAttribute("id", "resetZoom" + id);
                btnReset.onclick = function () {
                    var cur = parseInt(this.id.substring(9));
                    window.myline[cur].resetZoom();
                };
                btnReset.textContent = "Reset Zoom";

                var btnPan = document.createElement('button');
                chartBtnSet.appendChild(btnPan);
                btnPan.classList.add("btn");
                btnPan.classList.add("btn-primary");
                btnPan.setAttribute("type", "button");
                btnPan.setAttribute("id", "pan-switch" + id);
                btnPan.onclick = function () {
                    var cur = parseInt(this.id.substring(10));

                    var chart = window.myline[cur];
                    // console.log(chart.canvas);
                    var panOptions = chart.options.plugins.zoom;
                    panOptions.pan.enabled = !panOptions.pan.enabled;

                    var zoomOptions = chart.options.plugins.zoom.zoom;
                    if (panOptions.pan.enabled && zoomOptions.drag) zoomOptions.drag = !zoomOptions.drag;

                    chart.update();
                    document.getElementById('drag-switch' + cur).innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
                    document.getElementById('pan-switch' + cur).innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
                };
                btnPan.textContent = "Disable Pan";

                var btnDrag = document.createElement('button');
                chartBtnSet.appendChild(btnDrag);
                btnDrag.classList.add("btn");
                btnDrag.classList.add("btn-primary");
                btnDrag.setAttribute("type", "button");
                btnDrag.setAttribute("id", "drag-switch" + id);
                btnDrag.onclick = function () {
                    var cur = parseInt(this.id.substring(11));

                    var chart = window.myline[cur];
                    var zoomOptions = chart.options.plugins.zoom.zoom;
                    zoomOptions.drag = !zoomOptions.drag;

                    var panOptions = chart.options.plugins.zoom;
                    if (panOptions.pan.enabled && zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;
                    if (!panOptions.pan.enabled && !zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;

                    chart.update();
                    document.getElementById('drag-switch' + cur).innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
                    document.getElementById('pan-switch' + cur).innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
                };
                btnDrag.textContent = "Enable drag mode";

                var btnShot = document.createElement('button');
                chartBtnSet.appendChild(btnShot);
                btnShot.classList.add("btn");
                btnShot.classList.add("btn-primary");
                btnShot.setAttribute("type", "button");
                btnShot.setAttribute("id", "screenShot" + id);
                btnShot.onclick = function () {
                    var cur = parseInt(this.id.substring(10));

                    var chart = window.myline[cur];

                    printClip(chart.canvas, chart.options.title.text);

                };
                btnShot.textContent = "Print";

                // -----------
                // draw chart
                // -----------
                var chartContainer = document.createElement("div");
                deepdomContentBody.appendChild(chartContainer);
                chartContainer.classList.add('chart-container');

                var chartCanvas = document.createElement("canvas");
                chartContainer.appendChild(chartCanvas);

                var xAxis = [];
                for (var j = 0; j <= score[id].length; j++) xAxis[j] = j + " : " + seq[id][j];
                // for (var j = 0; j <= score[this.id].length; j++) xAxis[j] = j;

                var overScore = [];
                var belowScore = [];
                for (var j = 0; j <= score[id].length; j++) {
                    if (score[id][j] <= threshold) {
                        overScore[j] = "NaN";
                        belowScore[j] = score[id][j];
                        if (j > 0 && belowScore[j - 1] == 'NaN') overScore[j] = score[id][j];
                    }
                    else {
                        overScore[j] = score[id][j];
                        belowScore[j] = "NaN";
                        if (j > 0 && overScore[j - 1] == 'NaN') overScore[j - 1] = belowScore[j - 1];
                    }
                }

                var chartData = {
                    labels: xAxis,
                    datasets: [{
                        type: 'line',
                        label: 'Score',
                        borderColor: 'rgb(255,255,0)',
                        pointStyle: "star",
                        pointBorderColor: 'rgb(0,0,255)',
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        fill: false,
                        lineTension: 0,
                        data: belowScore
                    }, {
                        type: 'line',
                        label: 'Over Score',
                        borderColor: 'rgb(255,255,0)',
                        pointStyle: "star",
                        pointBorderColor: 'rgb(255,0,0)',
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        fill: false,
                        lineTension: 0,
                        data: overScore
                    }]
                }

                var ctx = chartCanvas.getContext('2d');
                window.myline[id] = new Chart(ctx, {
                    type: 'line',
                    data: chartData,
                    options: {
                        responsive: true,
                        title: {
                            display: false,
                            text: names[id]
                        },
                        legend: {
                            display: false
                        },
                        tooltips: {
                            callbacks: {
                                beforeLabel: function (tooltipItem, data) {
                                    var beforeLabel = "Score: ";
                                    beforeLabel += Math.round(tooltipItem.yLabel * 10000000) / 10000000;
                                    if (Math.round(tooltipItem.yLabel * 10000000) / 10000000 >= threshold) beforeLabel += " (over)";
                                    return beforeLabel;
                                },
                                label: function (tooltipItem, data) {
                                    var label = "";
                                    return label;
                                },
                                afterLabel: function (tooltipItem, data) {
                                    var afterLabel = "";
                                    for (var p = tooltipItem.index - 2; p < tooltipItem.index + 3; p++) {
                                        var ch = data.labels[p].substring(data.labels[p].indexOf(":") + 1);
                                        if (data.labels[p] == undefined) afterLabel += "- ";
                                        else if (p == tooltipItem.index) afterLabel += " '" + ch + " ' ";
                                        else afterLabel += ch + " ";
                                    }
                                    return afterLabel;
                                }
                            }
                        },
                        annotation: {
                            events: ["mouseover", "mouseout"],
                            annotations: [
                                {
                                    id: "hline",
                                    type: "line",
                                    mode: "horizontal",
                                    scaleID: "y-axis-0",
                                    value: threshold,
                                    borderColor: "black",
                                    borderWidth: 5,
                                    label: {
                                        backgroundColor: "red",
                                        content: "Threshold: " + threshold,
                                        enabled: false
                                    },
                                    onMouseover: function (e) {
                                        var element = this;
                                        element.options.borderWidth = 7;
                                        element.options.label.enabled = true;
                                        element.chartInstance.update();
                                        element.chartInstance.chart.canvas.style.cursor = 'pointer';
                                    },
                                    onMouseout: function (e) {
                                        var element = this;
                                        element.options.borderWidth = 4;
                                        element.chartInstance.update();
                                        setTimeout(function () {
                                            element.options.label.enabled = false;
                                            element.chartInstance.update();
                                        }, 0);
                                        element.chartInstance.chart.canvas.style.cursor = 'initial';
                                    }
                                }]
                        }
                    }
                })

                var chart = window.myline[id];
                var zoomOptions = chart.options.plugins.zoom.zoom;
                zoomOptions.enabled = !zoomOptions.enabled;
                // zoomOptions.drag = zoomOptions.drag;
                var panOptions = chart.options.plugins.zoom;
                panOptions.pan.enabled = !panOptions.pan.enabled;
                chart.update();


                // =======================================
                // Calculate which method is more accurate
                // =======================================
                var calData = {
                    queryName: names[id],
                    queryNo: id
                }
                var calURL = "/process/comparison/:" + jobId;
                $.post(calURL, calData, function (data, status) {
                    if (data.method == 'scop') {
                        $('#scop_' + data.id).collapse('show');
                    }
                    else if (data.method == 'cath') {
                        $('#cath_' + data.id).collapse('show');
                    }
                    else if (data.method == 'deepdom') {
                        $('#deepdom_' + data.id).collapse('show');
                    }
                })

            }

            $('[data-toggle="popover"]').popover(); // enable each popover

            // ++++++++++++++++++++++++++
            // ++++++++++++++++++++++++++
            // Update a list to side nav bar
            // ++++++++++++++++++++++++++
            // ++++++++++++++++++++++++++

            var listGroup = document.getElementById("barList");
            for (var i = 0; i < idList.length; i++) {
                var id = idList[i];

                var a = document.createElement("button");
                a.textContent = names[id];
                a.classList.add("list-group-item");
                a.classList.add("list-group-item-action");
                a.classList.add("list-group-item-primary");
                a.setAttribute("style", "font-size: 10px;");
                a.setAttribute("id", "goto" + id);
                a.onclick = function () {
                    var cur = parseInt(this.id.substring(4));
                    var element = document.querySelector("#query_header_" + cur);
                    var actualTop = element.offsetTop;
                    var current = element.offsetParent;
                    while (current !== null) {
                        actualTop += current.offsetTop;
                        current = current.offsetParent;
                    }
                    window.scrollTo({
                        top: actualTop - document.documentElement.clientHeight / 6,
                        behavior: "smooth"
                    });
                };
                listGroup.appendChild(a);
            }

            // display the side bar or not
            var inside = document.getElementById("barList").innerHTML;
            if (inside.length > 0) document.getElementById("sidebarBtn").style.display = "block";
            else {
                document.getElementById("sidebarBtn").style.display = "none";
                document.getElementById("mySidenav").style.width = '0';
            }
        });

        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("box").style.display = "block";
            } else {
                document.getElementById("box").style.display = "none";
            }
        }

        box.onclick = function () {
            window.scrollTo({
                top: 0,
                behavior: "smooth"
            });
        }

        function toggleNav() {
            var width = document.getElementById("mySidenav").style.width;
            if (width == '15%') document.getElementById("mySidenav").style.width = '0';
            else document.getElementById("mySidenav").style.width = '15%';
        }

        function closeNav() {
            document.getElementById("mySidenav").style.width = "0";
        }
    </script>

    <style type="text/css">
        /* show sequence window style */
        .popover {
            max-width: 50%;
            /* background-color: #6c757d; */
        }

        .popover-body {
            color: black;
        }

        /* Return to Top Style */
        .box {
            display: none;
            position: fixed;
            right: 30px;
            bottom: 60px;
            height: 50px;
            width: 50px;
            text-align: center;
            padding-top: 20px;
            background-color: blue;
            border-radius: 20%;
            overflow: hidden;
        }

        .box:hover:before {
            top: 50%
        }

        .box:hover .box-in {
            visibility: hidden;
        }

        .box:before {
            position: absolute;
            top: -50%;
            left: 50%;
            transform: translate(-50%, -50%);
            content: 'Top';
            width: 40px;
            color: white;
            font-weight: bold;

        }

        .box-in {
            visibility: visible;
            display: inline-block;
            height: 20px;
            width: 20px;
            border: 3px solid black;
            border-color: white transparent transparent white;
            transform: rotate(45deg);
        }

        /* sideBar style */
        .sidebarBtn {
            display: none;
            position: fixed;
            left: 0;
            bottom: 50%;
            height: 50px;
            width: 30px;
            text-align: center;
            padding-top: 15px;
            padding-right: 10px;
            background-color: blue;
            border-radius: 20%;
            overflow: hidden;
        }

        .barBtn-in {
            visibility: visible;
            display: inline-block;
            height: 20px;
            width: 20px;
            border: 3px solid white;
            border-color: white transparent transparent white;
            transform: rotate(135deg);
        }

        .sidenav {
            height: 100%;
            width: 0;
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            background-color: #b8daff;
            overflow-x: hidden;
            transition: 0.5s;
            padding-top: 60px;
        }

        .sidenav a {
            padding: 8px 8px 8px 32px;
            text-decoration: none;
            font-size: 25px;
            color: white;
            display: block;
            transition: 0.3s;
        }

        .sidenav a:hover,
        .offcanvas a:focus {
            color: black;
        }

        .sidenav .closebtn {
            position: absolute;
            top: 0;
            right: 15px;
            font-size: 30px;
            margin-left: 50px;
        }

        @media screen and (max-height: 450px) {
            .sidenav {
                padding-top: 15px;
            }

            .sidenav a {
                font-size: 18px;
            }
        }

        .color-box {
            width: 15px;
            height: 15px;
            display: inline-block;
        }

        .rect-hover {
            stroke-width: 2;
            stroke: black;
        }

        .table-hover {
            background: rgb(231, 209, 209);
            opacity: 0.8;
        }
    </style>

<% include partials/footer%>